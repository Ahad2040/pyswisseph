# Pyswisseph CmakeLists.txt for Windows

cmake_minimum_required( VERSION 2.8 )
project( pyswisseph )

message( STATUS "-- Configuring pyswisseph..." )

# Python version we are looking for
set( DESIRED_PYTHON_VERSION 2.7 )

# Options
option( PYSWE_AUTO_SET_EPHE_PATH "Automaticaly set ephemeris path on module import" ON )
option( PYSWE_USE_SWEPHELP "Build additional functions" ON )

if ( PYSWE_AUTO_SET_EPHE_PATH )
    add_definitions( -DPYSWE_AUTO_SET_EPHE_PATH=1 )
    message( STATUS "... Ephemeris path will be set on module import..." )
else()
    add_definitions( -DPYSWE_AUTO_SET_EPHE_PATH=0 )
endif()

if ( PYSWE_USE_SWEPHELP )
    add_definitions( -DPYSWE_USE_SWEPHELP=1 )
    message( STATUS "... Additional functions will be compiled..." )
else()
    add_definitions( -DPYSWE_USE_SWEPHELP=0 )
endif()

# Find Python libs
find_package( PythonLibs ${DESIRED_PYTHON_VERSION} EXACT )
if ( NOT PYTHONLIBS_FOUND )
    message( FATAL_ERROR "Cannot find Python libraries." )
endif()

# Configure cswisseph
add_subdirectory( src )

# Sources
set( SOURCES
    pyswisseph.c
    swephelp/swhdatetime.c
    swephelp/swhformat.c
    swephelp/swhsearch.c
    swephelp/swhraman.c
    swephelp/swhgeo.c
    swephelp/swhutil.c
    )

if ( MSVC )
    add_definitions( -D_CRT_SECURE_NO_WARNINGS )
else()
    add_definitions( -std=gnu99 -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC )
endif()

include_directories( BEFORE src swephelp ${PYTHON_INCLUDE_DIRS} )

add_library( swisseph MODULE ${SOURCES} )

add_dependencies( swisseph swe )

if ( WIN32 )
    target_link_libraries( swisseph swe ${PYTHON_LIBRARIES} )
else()
    target_link_libraries( swisseph swe m ${PYTHON_LIBRARIES} -pthread -Wl,-O1 -Wl,-Bsymbolic-functions )
endif()

if ( WIN32 )
    set_target_properties( swisseph PROPERTIES SUFFIX .pyd )
else()
    set_target_properties( swisseph PROPERTIES PREFIX "" )
endif()

# vi: set ai et sw=4:
